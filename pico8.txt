============================================================================================

 PICO-8  v0.0.3
 http://www.pico-8.com
 (c) Copyright 2014-2015 Lexaloffle Games LLP
 Alpha version; please do not distribute!
 Author: joseph@lexaloffle.com
  
 User Manual // WIP!

============================================================================================

Welcome to PICO-8!

	PICO-8 is a fantasy console for making, sharing and playing tiny games and other computer 
	programs. When you turn it on, the machine greets you with a shell for typing in Lua programs 
	straight away and provides simple built-in tools for creating sprites, maps and sound.

	The harsh limitations of PICO-8 are carefully chosen to be fun to work with, encourage small
	but expressive designs and hopefully to give PICO-8 cartridges their own particular look and 
	feel.


:: Specs

	Display: 128x128, fixed 16 colour palette
	Input: 6 buttons x 2 players
	Cartridge size: 32k
	Sound: 4 channel, 64 definable chip blerps
	Code: Lua (max 15400 bytes of source code) 
	Sprites: Single bank of 128 8x8 sprites (+128 shared)
	Map: Single 128x32 (+128x32 shared)

:: Features

	Built-in tools for editing programs, drawing sprites and maps, and composing sound and music.
	Graphics functions for drawing sprites, sections of the map and geometric primitives.
	Palette mapping for recolouring sprites at draw-time and performing screen fades.
	Iterators and methods for managing collections of objects (e.g. game world actors)
	Compact data format for sharing cartridges as a single .png file.
	Pause programs, modify live data and resume them using STOP and RESUME.
	Display interrupt allowing harmless infinite loops. while(true) print("pico rulz") end

	
:: Hello World

	After pico-8 boots, try typing some of these commands followed by enter:

		PRINT("HELLO WORLD")
		RECTFILL(80,80,120,100,12)
		CIRCFILL(70,90,20,14)
		FOR I=1,4 DO PRINT(I) END
	
	(Note: PICO-8 only displays upper-case characters -- just type normally without capslock!)
	
	You can build up an interactive program by using commands like this in the code editing
	mode along with two special callback function _update and _draw. For example, the following
	program allows you to move a circle around with the cursor keys. Press escape to switch
	to the code editor and type or copy&paste the following code:

	X = 64  Y = 64
	FUNCTION _UPDATE()
	 IF (BTN(0)) THEN X=X-1 END
	 IF (BTN(1)) THEN X=X+1 END
	 IF (BTN(2)) THEN Y=Y-1 END
	 IF (BTN(3)) THEN Y=Y+1 END
	END

	FUNCTION _DRAW()
	 RECTFILL(0,0,127,127,6)
	 CIRCFILL(X,Y,7,8)
	END

	Now press escape to return to the main console and type RUN to see it in action.
	See the example cartridges for more complex programs.


:: Example Cartridges

	API       Demonstrates most PICO-8 functions
	SERP      Serpinsky triangle
	MANDEL    Mandelbrot explorer
	PLAT      Platformer demo -- collect gems
	BLUEY     Collect apples by modifying map
	CAST      2.5D Raycaster demo
	AUTOMATA  1D automata explorer
	DRIPPY    Draw a drippy squiggle
	POKECOL   Drawing to screen with poke()
	STOMPY    Music cart
	WOO       Music cart

	To run a cartridge, open pico-8 and type:

	LOAD "NAME"
	RUN
	
	Press escape to stop the program, and once more to enter editing mode
	Use the cursor keys for dpad (joystick) and ZX or CV for buttons A & B
	
============================================================================================
	Editing Modes
============================================================================================

	Note: no undo implemented yet -- be careful!
	
	Press escape to toggle between console and editor
	Click editing mode tabs at top right to switch or press 


:: Code
	
	Normal text editor. Use cursors and pageup, pagedown to navigate.
	Hold shift to select (or click and drag with mouse)
	CTRL-X, C, V to cut copy or paste as usual
	No undo or search/replace yet -- sorry!


:: Gfx

	Click on the sprite to edit, and choose a view zoom size
	Hold LCONTROL to search and replace a colour
	Click brush size to change between 1,3 and 5-pixel brush
	Shift-drag in the navigator to select multiple sprites
	Navigate through sprites with - and + keys
	Operations on selected sprites:
		f to flip
		v to flip vertically
		r to rotate (must be square selection)
		Cursor keys to shift sprite (loops)
		Ctrl-C to copy
		Ctrl-V to paste
		toggle flags by clicking on the 6 circles


:: Map

	Place selected sprite in grid cel
	Each cel only stores one 8-bit values (normally used as an index into the sprite sheet)
	Drawing to cels with y >= 32 clobbers shared data (bottom half of sprite sheet)
	To draw multiple sprites, select from sprite navigator with shift+drag
	To copy a block of values, use the selection tool and then stamp tool to paste
	To pan around the map, use the pan tool or hold space
	
:: Sfx

	Click and drag current instrument
	Hold control while painting frequencies to snap to Cm pentatonic
	
	Click/right-click on SPD to decrease/increase speed (lower value means faster)
		// hold shift for x4
	LP0 LP1 determines looping start and end points
	Space to start/stop
	
	Use the view mode buttons to edit the sfx's data as a graph or a tracker-style.
	
	Tracker mode: each note shows: frequency octave instrument volume effect
	Shift-click instrument / effect / volume to set for all notes
	
	Effects: 0 none 1 slide 2 vibrato 3 drop 4 fade_in 5 fade_out 6 arp fast 7 arp slow

	Arpeggio commands (6,7) iterate over groups of 4 notes at speed 2 and 4


:: Music

	Click/Right-click pattern numbers to indicate which sfx will be played for that pattern
	Use loop and stop flags to control play-back flow.
	Space to start/stop
	
	
============================================================================================
	Lua Primer
============================================================================================

Pico-8 programs are written in Lua and also run on a Lua virtual machine.
The following is a brief summary of essential features of Lua.
For more detailed information, see www.lua.org.

:: Comments

	-- use two hyphens like this to ignore everything until the end of the line
	
:: Types and assignment

	Types in Lua are numbers, strings, booleans and tables;

	NUM = 12/100
	S = "THIS IS A STRING"
	B = FALSE
	T = {1,2,3}
	
	Numbers in pico-8 are all 16:16 fixed point. They can range from -32768 to 32767.
	Integer values can be written in hexidecimal. e.g. 0x11 = 17.0
	
:: Conditionals

	IF (NOT B) THEN
		PRINT("B IS FALSE")
	ELSE
		PRINT("B IS NOT FALSE")
	END
	
:: Loops

	FOR X=1,10,2 DO
		PRINT(X)
	END
	-- prints 1,3,5,7,9

	X = 1
	WHILE(X <= 10) DO
		PRINT(X)
		X = X + 2
	END

:: Functions and Local Variables

	Y=0
	FUNCTION PLUSONE(X)
		LOCAL Y = X+1
		RETURN Y
	END
	PRINT(PLUSONE(2)) -- 3
	PRINT(Y)          -- 0

:: Tables (Arrays and Objects)

	Arrays use 1-based indexing by default

	A = {1,2,3,4}
	A[3]=A[4]
	FOREACH(A, PRINT) -- 1 2 4 4
	
	Indexes can also be strings, and written as member variables
	
	B = {}
	B.X = 2 -- is equivalent to B["X"]
	B.Y = 2

:: Iterating over tables

	Works if using PICO-8's ADD() and DEL() functions to construct
	
	A = {}
	ADD(A, "hello")
	ADD(A, "blah")
	ADD(A, "world")
	DEL(A, "blah")
	PRINT(COUNT(A)) -- 2
	
	FOR ITEM IN ALL(A) DO PRINT(ITEM) END

	-- or, equivalently:
	FOREACH(A, PRINT)
	
	-- also equivalently, using an anonymous function:
	FOREACH(A, FUNCTION(I) PRINT(I) END)


:: End-lines

	end-of-line characters have no meaning except to terminate comments.
	X = 1 Y = 2 PRINT(X+Y) -- this line will run ok
	
============================================================================================
	API
============================================================================================

	PICO-8 is built on the Lua scripting language, but does not include the Lua standard library.
	Instead use the following functions, which are listed with their optional parameters in square 
	brackets. For an example program that uses most of the api functions, try LOAD("API")

--------------------------------------------------------------------------------------------------------
	System
--------------------------------------------------------------------------------------------------------


load filename
save filename
	Load or save a cartridge
	Use ".png" format to save a png -- otherwise text format is used
	
	For .png carts, run the program first and press F7 to select a preview image
	Also the first two lines of the program starting with '--' are drawn to the cart's label 
	Suggested: first line title, second line authors
	
run
	Run from the start of the program

resume
	Run from the existing cart state
	
reset
	Reset the machine // not implemented

stat x
	Returns the current cpu useage (0) or memory useage (1)

flip
	Flip the back buffer to screen and wait for next frame (30fps)
	Don't normally need to do this -- _draw() calls it for you.
	
	If your program does not call flip before a frame is up, and a _draw() callback
	is not in progress, the current contents of the back buffer are copied to screen.
	No need to flip() if provide a _draw() callback

--------------------------------------------------------------------------------------------
	Program Structure
--------------------------------------------------------------------------------------------

	There are 3 special functions that, if defined by the user, are called during program 
	execution:
	
		_update()
			called once per update at 30fps
	
		_draw()
			called once per frame
		
		_init()
			called once on program startup


--------------------------------------------------------------------------------------------
	Graphics
--------------------------------------------------------------------------------------------

	PICO-8 has a single bank of 128 8x8 sprites, plus another 128 that overlaps with the
	bottom half of the map data ("shared data"). These 256 sprites are collectively called
	the sprite sheet, and can be thought of as a 128x128 pixel image.

	All of PICO-8's drawing operations are subject to the current draw-state. The draw-state
	includes a camera position (for adding an offset to all coordinates), palette mapping 
	(for recolouring sprites), clipping rectangle, and a draw colour that can optionally be 
	set by any relevant function but otherwise persists.

	The draw state is reset each time a program is run. This is equivalent to calling:
	clip() camera() pal() color()

	Colours indexes:
	
	 0  black   1  dark_blue   2  dark_purple   3  dark_green  
	 4  brown   5  dark_gray   6  light_gray    7  white
	 8  red     9  orange     10  yellow       11  green       
	12  blue   13  indigo     14  pink         15  peach


clip [x y w h]

	Sets the screen's clipping region in pixels
	clip() to reset
	
	
pget x y
pset x y [c]

	Get or set the colour (c) of a pixel at x, y.
	
	
sget x y
sset x y [c]

	Get or set the colour (c) of a spritesheet pixel.
	
	
fget n f
fset n f v

	Get or set the value (v) of a sprite's flag
	f is the flag index 0..7
	v is boolean and can be true or false
	
	The initial state of flags 0..5 are settable in the sprite editor,
	using the line of little colourful buttons.
	
	The meaning of sprite flags is up to the user, or can be used to
	indicate which group ('layer') of sprites should be drawn by mapdraw.


print str [x y [col]]

	Print a string
	
	
cursor x y

	Set the cursor position and carriage return margin


color col

	Set the default color to be used by drawing functions
	
	
cls

	Clear the screen


camera [x y]

	Set a screen offset of -x, -y for all drawing operations
	camera() to reset
	
	
circ     x y r [col]
circfill x y r [col]

	Draw a circle or filled circle at x,y with radius r


line x0 y0 x1 y1 [col]

	draw line


rect     x0 y0 x1 y1 [col]
rectfill x0 y0 x1 y1 [col]

	Draw a rectange or filled rectange
	

pal c0 c1 [p]

	Draw all instances of colour c0 as c1 in subsequent draw calls

	pal() to reset to system defaults
	two types of palette (p; defaults to 0)
		0 draw palette   : colours are remapped on draw    // e.g. to re-colour sprites
		1 screen palette : colours are remapped on display // e.g. for fades
	c0 colour index 0..15
	c1 colour index to map to


spr n x y [w h]

	draw sprite n (0..255) at position x,y
	width and height are 1,1 by default and specify how many sprites wide to blit.
	Colour 0 always drawn as transparent.
	

sspr sx sy sw sh dx dy dw dh [flip]

	stretch rectangle from sprite sheet (sx, sy, sw, sh)
	and draw in rectangle (dx, dy, dw, dh)
	flip=true to flip horizontally // unimplemented


map mx my sx sy [w h [layer]]

	draw section of map (in cels) at screen position sx, sy (pixels)
	if layer is specified, only cels with the same flag number set are drawn


--------------------------------------------------------------------------------------------
	Collections
--------------------------------------------------------------------------------------------


a = {}
add(a, "hello")
add(a, "blah")
add(a, "world")
del(a, "blah") -- deletes first occurance of value in collection
for item in all(a) do print(item) end
foreach(a, print)
print(count(a))

c = {1,2,3}
foreach(c, print)

--------------------------------------------------------------------------------------------
	Input
--------------------------------------------------------------------------------------------

btn i [p]

	get button i state for player p (default 0)
	i: 0..5: left right up down a_button b_button
	p: player index 0 or 1
	
	Default keyboard mappings to player buttons:
		player 0: cursors, Z,X/C,V/N,M
		player 1: ESDF, LSHIFT,A/TAB,Q

--------------------------------------------------------------------------------------------
	Audio
--------------------------------------------------------------------------------------------

sfx n [channel [offset]]

	play sfx n on channel from note offset
	n -1 to stop sound on that channel
	any music playing on that channel will be halted
	channel -1 to automatically choose a channel that is not being used for music playback
	offset in notes (0..31)

music [n [fade_len [channel_mask]]]

	play music starting from pattern n (0..63)
	n -1 to stop music
	fade_len in ms (default: 0)
	channel_mask specifies which channels to play music on
		e.g. to play on channels 0..2: 1+2+4 = 7
		defaults to 15 -- all channels (1+2+4+8)

--------------------------------------------------------------------------------------------------------
	Map
--------------------------------------------------------------------------------------------------------

mget x y
mset x y v

	get or set map value (v) at x,y



mapdraw cel_x cel_y screen_x screen_y cel_w cel_h [layer]

	draw map cels where bits in layer are set in the sprite's flags
	(default to all cells : 255)
	// cel flags are the per-sprite flags set w/ the 6 colourful toggle buttons

	sprite 0 is never drawn

	e.g. mapdraw(0,0, 20,20, 4,2)
	-> draws a 4x2 blocks of cels starting from 0,0 in the map, to the screen at 20,20

--------------------------------------------------------------------------------------------------------
	Memory
--------------------------------------------------------------------------------------------------------

PICO-8 has 3 types of memory:

	1. core ram (32k): screen, state data, extra data. Access with peek() poke() memcpy()
	2. cart rom: same layout as 1 until 0x4300. Copy from cart to core ram with reload()
	3. lua memory (256k): compiled program + variables. Pay no attention to the man behind the curtain.

Core ram memory layout
	0x0    gfx
	0x1000 gfx2/map2 (shared)
	0x2000 map
	0x3000 gfx_props
	0x3100 song
	0x3200 sfx
	0x4300 user-defined
	0x5f00 draw state [,cart data] (1024 bytes incl. unused)
	0x6000 screen (8k)
	
	Colour format (gfx/screen) is 2 pixels per byte: low bits on the left

peek addr
poke addr val

	Read and write one byte to an address in core ram.
	Legal addresses are 0x0..0x7fff
	Reading or writing outside causes a fault

memcpy dest_addr source_addr len

	Copy len bytes of core ram from source to dest
	Sections can be overlapping

reload dest_addr source_addr len

	Same as memcpy, but copies from cart rom

cstore dest_addr source_addr len

	Same as memcpy, but copies from core ram to cart rom
	Can use for writing tools to construct carts or to visualize the state 
	of the map / spritesheet using the map editor / gfx editor.

memset dest_addr val len

	Set len bytes to val
	(quite fast -- can use to draw unclipped horizonal scanlines etc)
	

--------------------------------------------------------------------------------------------------------
	Math
--------------------------------------------------------------------------------------------------------

max x y
min x y
mid x y z

	Returns the maximum, minimum, or middle value of parameters

flr x

	Returns the closest integer below x
	flr(-0.3) returns -1.0
	Same as (x%1) for positive values of x

cos x
sin x
	Returns the cosine of x, where 1.0 indicates a full circle
	e.g. sin(0.25) returns -1

abs x
	Returns the absolute (positive) value of x


------------------------------------------------------------------------------------------------------------
ALPHA HISTORY

v0.0.3

Added: Palette mapping type 1 (on display)
Added: Collections can be initialized with c={1,2,..}
Added: holdframe() // used automatically by _draw(), update()
Added: Sprite selections and operations across selections
Added: Map selection and stamp tool
Added: Immediate mode screen buffer preserved while switching views
Added: Channel mask for music playback
Added: Memory mapping for live sound data
Added: .png cart format
Added: Sprite navigation by keyboard (-, +)
Fixed: Strict 4-channel sound
Fixed: Automatic sfx channel selection (channel index: -1)


v0.0.2

Added: Command history
Added: P2 keys
Added: Boot sequence
Added: Windows, 64-bit linux builds
Added: CPU cost of internal api functions
Added: Separate song channel index and mute status
Added: Memory mapping
Added: Search/replace colour in sprite editor
Added: Copy/paste sprites and map regions
Improved: Immediate mode command editing
Improved: Editor cursor behaviour
Fixed: Automatic audio channel selection


v0.0.1 

First Alpha



